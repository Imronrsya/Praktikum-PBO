/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jdbc.program;

import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import jdbc.model.Mahasiswa;
import jdbc.service.MysqlMahasiswaService;

/**
 *
 * @author ASUS
 */
public class JFrameUtama extends javax.swing.JFrame {

    private static final Logger LOGGER = Logger.getLogger(JFrameUtama.class.getName());
    private final MysqlMahasiswaService service;

    // Konstruktor JFrameUtama, menginisialisasi komponen dan data mahasiswa dari database
    public JFrameUtama() throws SQLException {
        initComponents();
        service = new MysqlMahasiswaService();
        loadMahasiswaList();
        jListID.addListSelectionListener(e -> updateTextFieldsFromList());
        jListNama.addListSelectionListener(e -> updateTextFieldsFromList());
    }

    // Memuat daftar mahasiswa dari database dan menampilkannya di list
    private void loadMahasiswaList() throws SQLException {
        DefaultListModel<String> namaModel = new DefaultListModel<>();
        DefaultListModel<String> idModel = new DefaultListModel<>();
        List<Mahasiswa> mahasiswaList = service.getAll();

        for (Mahasiswa mhs : mahasiswaList) {
            namaModel.addElement(mhs.getNama());
            idModel.addElement(String.valueOf(mhs.getId()));
        }

        jListNama.setModel(namaModel);
        jListID.setModel(idModel);
    }
    

    
    // Mengupdate field teks berdasarkan elemen yang dipilih di list
    private void updateTextFieldsFromList() {
        int index = jListID.getSelectedIndex();

        if (index != -1) {
            String selectedId = jListID.getModel().getElementAt(index);
            String selectedName = jListNama.getModel().getElementAt(index);

            jTextFieldEditID.setText(selectedId);
            jTextFieldEditNama.setText(selectedName);
            jTextFieldHapusID.setText(selectedId);
            jTextFieldHapusNama.setText(selectedName);
            }
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListID = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListNama = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonGetAll = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButtonResetIndeks = new javax.swing.JButton();
        jTextFieldEditID = new javax.swing.JTextField();
        jTextFieldHapusID = new javax.swing.JTextField();
        jTextFieldEditNama = new javax.swing.JTextField();
        jTextFieldHapusNama = new javax.swing.JTextField();
        jButtonEdit = new javax.swing.JButton();
        jButtonHapus = new javax.swing.JButton();
        jTextFieldAddNama = new javax.swing.JTextField();
        jButtonAdd = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jListID);

        jScrollPane2.setViewportView(jListNama);

        jLabel3.setText("ID");

        jLabel4.setText("NAMA");

        jButtonGetAll.setText("Ambil Semua Data");
        jButtonGetAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetAllActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel1.setText("KELOLA DATA MAHASISWA");

        jLabel2.setText("nama");

        jButtonResetIndeks.setText("Reset Indeks");
        jButtonResetIndeks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetIndeksActionPerformed(evt);
            }
        });

        jButtonEdit.setText("Edit");
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });

        jButtonHapus.setText("Hapus");
        jButtonHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHapusActionPerformed(evt);
            }
        });

        jButtonAdd.setText("Tambahkan");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(299, 299, 299))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jTextFieldEditID, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldEditNama, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonGetAll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldAddNama, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAdd, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jTextFieldHapusID, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldHapusNama, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButtonResetIndeks))
                .addGap(8, 8, 8))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonGetAll)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldAddNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAdd)
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldEditID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonEdit)
                            .addComponent(jTextFieldEditNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldHapusID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonHapus)
                            .addComponent(jTextFieldHapusNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addComponent(jButtonResetIndeks))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Aksi untuk tombol "Ambil Semua Data"
    private void jButtonGetAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetAllActionPerformed
        try {
            loadMahasiswaList();
            JOptionPane.showMessageDialog(this, 
                "Data berhasil dimuat!", 
                "Informasi", 
                JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            String errorMessage = "Gagal mengambil data dari database";
            LOGGER.log(Level.SEVERE, errorMessage + ": " + ex.getMessage(), ex);
            
            String userMessage = errorMessage;
            if (ex.getMessage() != null && !ex.getMessage().isEmpty()) {
                userMessage += "\nDetail: " + ex.getMessage();
            }
            
            JOptionPane.showMessageDialog(this, 
                userMessage, 
                "Error Database", 
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonGetAllActionPerformed

    // Aksi untuk tombol "Reset Indeks"
    private void jButtonResetIndeksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetIndeksActionPerformed
        try {
            service.indexReset();
            JOptionPane.showMessageDialog(this, 
                "Indeks berhasil direset ke 0", 
                "Informasi", 
                JOptionPane.INFORMATION_MESSAGE);

            loadMahasiswaList();
        } catch (SQLException ex) {
            String errorMessage = "Gagal mereset indeks database";
            LOGGER.log(Level.SEVERE, errorMessage + ": " + ex.getMessage(), ex);
            
            String userMessage = errorMessage;
            if (ex.getMessage() != null && !ex.getMessage().isEmpty()) {
                userMessage += "\nDetail: " + ex.getMessage();
            }
            
            JOptionPane.showMessageDialog(this, 
                userMessage, 
                "Error Database", 
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonResetIndeksActionPerformed

    // Aksi untuk tombol "Edit"
    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
        String idStr = jTextFieldEditID.getText();
        String nama = jTextFieldEditNama.getText();

        if (idStr.isEmpty() || nama.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "ID dan Nama tidak boleh kosong", 
                "Validasi Input", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            int id = Integer.parseInt(idStr);
            Mahasiswa mhs = new Mahasiswa();
            mhs.setId(id);
            mhs.setNama(nama);

            service.update(mhs);
            
            loadMahasiswaList();
            
            jTextFieldEditID.setText("");
            jTextFieldEditNama.setText("");
            jTextFieldHapusID.setText("");
            jTextFieldHapusNama.setText("");
            
            JOptionPane.showMessageDialog(this, 
                "Data mahasiswa berhasil diupdate!", 
                "Sukses", 
                JOptionPane.INFORMATION_MESSAGE);
                
        } catch (NumberFormatException ex) {
            String errorMessage = "Format ID tidak valid - harus berupa angka";
            LOGGER.log(Level.WARNING, errorMessage + ": " + ex.getMessage(), ex);
            
            JOptionPane.showMessageDialog(this, 
                errorMessage, 
                "Error Input", 
                JOptionPane.ERROR_MESSAGE);
                
        } catch (SQLException ex) {
            String errorMessage = "Gagal mengupdate data mahasiswa";
            LOGGER.log(Level.SEVERE, errorMessage + ": " + ex.getMessage(), ex);
            
            String userMessage = errorMessage;
            if (ex.getMessage() != null && !ex.getMessage().isEmpty()) {
                userMessage += "\nDetail: " + ex.getMessage();
            }
            
            JOptionPane.showMessageDialog(this, 
                userMessage, 
                "Error Database", 
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonEditActionPerformed

    // Aksi untuk tombol "Hapus"
    private void jButtonHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHapusActionPerformed
        String idStr = jTextFieldHapusID.getText();
        
        if (idStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "ID tidak boleh kosong", 
                "Validasi Input", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Apakah Anda yakin ingin menghapus data mahasiswa dengan ID: " + idStr + "?", 
            "Konfirmasi Hapus", 
            JOptionPane.YES_NO_OPTION, 
            JOptionPane.QUESTION_MESSAGE);
            
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
        
        try {
            int id = Integer.parseInt(idStr);
            service.delete(id);
            
            loadMahasiswaList();
            
            jTextFieldHapusID.setText("");
            jTextFieldHapusNama.setText("");
            jTextFieldEditID.setText("");
            jTextFieldEditNama.setText("");
            
            JOptionPane.showMessageDialog(this, 
                "Data mahasiswa berhasil dihapus!", 
                "Sukses", 
                JOptionPane.INFORMATION_MESSAGE);
                
        } catch (NumberFormatException ex) {
            String errorMessage = "Format ID tidak valid - harus berupa angka";
            LOGGER.log(Level.WARNING, errorMessage + ": " + ex.getMessage(), ex);
            
            JOptionPane.showMessageDialog(this, 
                errorMessage, 
                "Error Input", 
                JOptionPane.ERROR_MESSAGE);
                
        } catch (SQLException ex) {
            String errorMessage = "Gagal menghapus data mahasiswa";
            LOGGER.log(Level.SEVERE, errorMessage + ": " + ex.getMessage(), ex);
            
            String userMessage = errorMessage;
            if (ex.getMessage() != null && !ex.getMessage().isEmpty()) {
                userMessage += "\nDetail: " + ex.getMessage();
            }
            
            JOptionPane.showMessageDialog(this, 
                userMessage, 
                "Error Database", 
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonHapusActionPerformed

    // Aksi untuk tombol "Tambahkan"
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        String nama = jTextFieldAddNama.getText().trim();

        if (nama.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Nama tidak boleh kosong", 
                "Validasi Input", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (nama.length() < 2) {
            JOptionPane.showMessageDialog(this, 
                "Nama harus minimal 2 karakter", 
                "Validasi Input", 
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        try {
            service.add(nama);
            loadMahasiswaList();
            jTextFieldAddNama.setText("");
            
            JOptionPane.showMessageDialog(this, 
                "Data mahasiswa berhasil ditambahkan!", 
                "Sukses", 
                JOptionPane.INFORMATION_MESSAGE);
                
        } catch (SQLException ex) {
            String errorMessage = "Gagal menambahkan data mahasiswa";
            LOGGER.log(Level.SEVERE, errorMessage + ": " + ex.getMessage(), ex);
            
            String userMessage = errorMessage;
            if (ex.getMessage() != null && !ex.getMessage().isEmpty()) {
                userMessage += "\nDetail: " + ex.getMessage();
            }
            
            JOptionPane.showMessageDialog(this, 
                userMessage, 
                "Error Database", 
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
        try {
            new JFrameUtama().setVisible(true);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, 
                "Gagal koneksi database: " + e.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonGetAll;
    private javax.swing.JButton jButtonHapus;
    private javax.swing.JButton jButtonResetIndeks;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListID;
    private javax.swing.JList<String> jListNama;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextFieldAddNama;
    private javax.swing.JTextField jTextFieldEditID;
    private javax.swing.JTextField jTextFieldEditNama;
    private javax.swing.JTextField jTextFieldHapusID;
    private javax.swing.JTextField jTextFieldHapusNama;
    // End of variables declaration//GEN-END:variables
}